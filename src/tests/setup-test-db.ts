import {
  PostgreSqlContainer,
  StartedPostgreSqlContainer,
} from '@testcontainers/postgresql';
import { execSync } from 'child_process';
import { PrismaClient } from '@prisma/client';

// VariÃ¡veis globais para acessar o contÃªiner e o cliente em todo o teste
let container: StartedPostgreSqlContainer;
let testDatabaseUrl: string;

// FunÃ§Ã£o para ser chamada antes de todos os testes (ex: no beforeAll)
export async function setupTestDB() {
  console.log('ğŸŸ¡ Iniciando o contÃªiner do Testcontainers...');

  // 1. Inicia o contÃªiner
  container = await new PostgreSqlContainer('postgres:16-alpine')
    .withExposedPorts(container?.getMappedPort(5432) || 5432)
    .start();

  // 2. ObtÃ©m a URL de conexÃ£o dinÃ¢mica
  // O Testcontainers cuida de criar um banco de dados temporÃ¡rio com credenciais
  testDatabaseUrl = container.getConnectionUri();
  console.log('ğŸŸ¢ ContÃªiner iniciado. URL do banco de teste:', testDatabaseUrl);

  // 3. Executa as migraÃ§Ãµes do Prisma (usando a URL do banco de testes)
  // Usar 'migrate deploy' Ã© o ideal para testes
  console.log('ğŸŸ¡ Aplicando as migraÃ§Ãµes do Prisma...');
  execSync('npx prisma migrate deploy', {
    env: {
      ...process.env,
      DATABASE_URL: testDatabaseUrl, // Injeta a URL do contÃªiner
    },
    stdio: 'inherit', // Para ver a saÃ­da do Prisma
  });

  console.log('ğŸŸ¢ Banco de dados de teste pronto!');
  return testDatabaseUrl;
}

// FunÃ§Ã£o para ser chamada depois de todos os testes (ex: no afterAll)
export async function teardownTestDB() {
  if (container) {
    console.log('ğŸ”´ Parando o contÃªiner do Testcontainers...');
    await container.stop();
    console.log('ğŸ”´ ContÃªiner parado e recursos limpos.');
  }
}

/**
 * FunÃ§Ã£o para criar uma nova instÃ¢ncia do PrismaClient conectada ao DB de teste.
 * Ã‰ recomendÃ¡vel criar uma nova instÃ¢ncia para cada suite/teste para maior isolamento.
 */
export function createTestPrismaClient(): PrismaClient {
  if (!testDatabaseUrl) {
    throw new Error(
      "O banco de dados de teste nÃ£o foi configurado. Garanta que 'setupTestDB' rodou.",
    );
  }

  return new PrismaClient({
    datasources: {
      db: {
        url: testDatabaseUrl,
      },
    },
  });
}
